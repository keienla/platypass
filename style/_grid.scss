@use './../spacers';
@use './../reactive';
@use './vars';

.#{vars.$default-prefix}grid {
    display: grid;
    grid-template-columns: repeat(vars.$grid-columns, minmax(0, 1fr));
    grid-gap: var(--container-gap, #{spacers.get(1)});
}
.#{vars.$default-prefix}is-dense {
    grid-auto-flow: dense;
}

.#{vars.$default-prefix}has-col-all {
    grid-column: 1 / -1;
}

.#{vars.$default-prefix}has-row-all {
    grid-row: 1 / -1;
}

.#{vars.$default-prefix}grid-line-break {
    grid-column-start: 1;
}

@for $i from 1 through vars.$grid-columns {
    .#{vars.$default-prefix}has-col-#{$i} {
        grid-column-end: span $i;
    }

    .#{vars.$default-prefix}has-cols-#{$i} {
        grid-template-columns: repeat($i, minmax(0, 1fr));
    }
}

@for $i from 1 through vars.$grid-rows {
    .#{vars.$default-prefix}has-row-#{$i} {
        grid-row: span $i;
    }
}

@each $key, $spacer in spacers.$spacers {
    .#{vars.$default-prefix}has-grid-gap-#{$key} {
        grid-gap: spacers.get($key);
    }
}

// Set grid responsive classes
@each $bp, $bpKey in reactive.$breakpoints {
    @include reactive.min(reactive.get($bp)) {
        // Full col item
        .#{$bp}\:#{vars.$default-prefix}has-col-all {
            grid-column: 1 / -1;
        }

        // Full row item
        .#{$bp}\:#{vars.$default-prefix}has-row-all {
            /* autoprefixer: off */
            grid-row: 1 / -1;
        }

        // Back to line
        .#{$bp}\:#{vars.$default-prefix}grid-line-break {
            grid-column-start: 1;
        }

        // Set number of col
        @for $i from 1 through vars.$grid-columns {
            .#{$bp}\:#{vars.$default-prefix}has-col-#{$i} {
                grid-column-end: span $i;
            }

            .#{$bp}\:#{vars.$default-prefix}has-cols-#{$i} {
                grid-template-columns: repeat($i, minmax(0, 1fr));
            }
        }

        // Set number of row
        @for $i from 1 through vars.$grid-rows {
            .#{$bp}\:#{vars.$default-prefix}has-row-#{$i} {
                grid-row: span $i;
            }
        }

        // Set grid gap
        @each $key, $spacer in spacers.$spacers {
            .#{$bp}\:#{vars.$default-prefix}has-grid-gap-#{$key} {
                grid-gap: spacers.get($key);
            }
        }
    }
}